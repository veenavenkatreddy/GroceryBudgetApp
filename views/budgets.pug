extends layout-sidebar

block content
  //- Page Header
  .dashboard-header.mb-4
    .d-flex.flex-wrap.justify-content-between.align-items-center.gap-3
      div
        h1.dashboard-title.mb-1 Budget Management
        p.dashboard-subtitle.mb-0 Create and manage your grocery budgets
      button.btn.btn-success.w-100.w-sm-auto(data-bs-toggle='modal' data-bs-target='#createBudgetModal')
        i.bi.bi-plus-lg.me-2
        | New Budget
  
  //- Active Budget
  if activeBudget
    .metric-card.mb-4.border-success(style='border-left: 4px solid var(--success);')
      .d-flex.align-items-center.mb-3
        .metric-icon.success.me-3
          i.bi.bi-check-circle
        h5.mb-0.text-success Active Budget
      
      .row.align-items-center
        .col-lg-8.mb-3.mb-lg-0
          h4.mb-2= activeBudget.name
          .d-flex.align-items-center.text-muted.mb-3
            i.bi.bi-calendar-range.me-2
            span #{new Date(activeBudget.period.start).toLocaleDateString()} - #{new Date(activeBudget.period.end).toLocaleDateString()}
          
          //- Progress Bar
          .mb-3
            .d-flex.justify-content-between.mb-2
              span.fw-semibold Budget Progress
              span.text-muted #{activeBudget.percentageSpent.toFixed(0)}% Used
            .progress(style='height: 10px;')
              .progress-bar(
                class=activeBudget.percentageSpent > 75 ? 'bg-danger' : activeBudget.percentageSpent > 50 ? 'bg-warning' : 'bg-success'
                style=`width: ${activeBudget.percentageSpent}%`
              )
          
          //- Stats
          .row.text-center.g-3
            .col-4
              .small.text-muted Budget
              .h5.mb-0= CurrencyHelper.format(activeBudget.totalLimit, userCurrency)
            .col-4
              .small.text-muted Spent
              .h5.mb-0.text-info= CurrencyHelper.format(activeBudget.currentSpent, userCurrency)
            .col-4
              .small.text-muted Remaining
              .h5.mb-0.text-success= CurrencyHelper.format(activeBudget.remainingBudget, userCurrency)
        
        .col-lg-4
          .card.border-0.bg-light
            .card-body.text-center
              .mb-3
                i.bi.bi-plus-circle.display-4.text-success
              h6.fw-bold.mb-3 Add Items to Budget
              p.text-muted.mb-3.small Track your grocery purchases and stay within budget
              
              button.btn.btn-success.w-100(data-bs-toggle='modal' data-bs-target='#addItemModal')
                i.bi.bi-plus-lg.me-2
                | Add Item
  
  //- Budget History
  .chart-card
    .chart-header
      h3.chart-title
        i.bi.bi-clock-history.me-2
        span Budget History
    
    .chart-body.p-0
      if budgets && budgets.length > 0
        .table-responsive
          table.table.table-hover.mb-0
            thead
              tr
                th Budget Name
                th Period
                th.text-end Budget
                th.text-end Spent
                th.text-center Status
                th.text-center Actions
            tbody
              each budget in budgets
                tr
                  td
                    .d-flex.align-items-center
                      = budget.name
                      if budget.isActive
                        span.badge.bg-success.ms-2 Active
                  td
                    small.text-muted #{new Date(budget.period.start).toLocaleDateString()} - #{new Date(budget.period.end).toLocaleDateString()}
                  td.text-end.fw-semibold= CurrencyHelper.format(budget.totalLimit, userCurrency)
                  td.text-end
                    span= CurrencyHelper.format(budget.currentSpent, userCurrency)
                    small.text-muted.ms-1 (#{budget.percentageSpent.toFixed(0)}%)
                  td.text-center
                    if budget.percentageSpent >= 100
                      span.badge.bg-danger Over Budget
                    else if budget.percentageSpent >= 75
                      span.badge.bg-warning High Usage
                    else if budget.percentageSpent >= 50
                      span.badge.bg-info Moderate
                    else
                      span.badge.bg-success On Track
                  td.text-center
                    .btn-group(role='group')
                      button.btn.btn-sm.btn-light(onclick=`viewBudget('${budget._id}')` title='View')
                        i.bi.bi-eye
                      button.btn.btn-sm.btn-light(onclick=`exportBudget('${budget._id}')` title='Export')
                        i.bi.bi-download
      else
        .empty-state.text-center.py-5.px-3
          .empty-state-icon.mx-auto.mb-4
            i.bi.bi-wallet2
          h4.empty-state-title No budget history
          p.empty-state-text.text-muted Create your first budget to start tracking expenses
  
  //- Create Budget Modal
  .modal.fade#createBudgetModal(tabindex='-1')
    .modal-dialog.modal-lg
      .modal-content
        .modal-header
          h5.modal-title Create New Budget
          button.btn-close(type='button' data-bs-dismiss='modal')
        .modal-body
          form#createBudgetForm.needs-validation(novalidate)
            .row.g-3
              .col-md-6
                .form-floating
                  input.form-control#budgetName(type='text' placeholder='Budget name' required)
                  label(for='budgetName') Budget Name
                  .invalid-feedback Please enter a budget name.
              
              .col-md-6
                .form-floating
                  input.form-control#totalLimit(type='number' step='0.01' min='0' placeholder='0.00' required)
                  label(for='totalLimit')= `Total Budget (${CurrencyHelper.getSymbol(userCurrency)})`
                  .invalid-feedback Please enter a valid budget amount.
            
            .row.g-3.mt-2
              .col-md-6
                .form-floating
                  input.form-control#startDate(type='date' required)
                  label(for='startDate') Start Date
                  .invalid-feedback Please select a start date.
              
              .col-md-6
                .form-floating
                  input.form-control#endDate(type='date' required)
                  label(for='endDate') End Date
                  .invalid-feedback Please select an end date.
            
            h6.mt-4.mb-3 Category Limits (Optional)
            .category-limits
              if categories
                each category in categories
                  .row.g-3.mb-2.align-items-center
                    .col-md-6
                      .form-check
                        input.form-check-input.category-check(type='checkbox' id=`cat_${category._id}` value=category._id)
                        label.form-check-label(for=`cat_${category._id}`)= category.name
                    .col-md-6
                      .input-group.input-group-sm
                        span.input-group-text= CurrencyHelper.getSymbol(userCurrency)
                        input.form-control.category-limit(type='number' step='0.01' min='0' placeholder='No limit' disabled)
        
        .modal-footer
          button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Cancel
          button.btn.btn-primary(type='button' onclick='createBudget()')
            i.bi.bi-plus-circle.me-2
            | Create Budget

  //- Add Item Modal
  if activeBudget
    .modal.fade#addItemModal(tabindex='-1')
      .modal-dialog
        .modal-content
          .modal-header
            h5.modal-title Add New Item
            button.btn-close(type='button' data-bs-dismiss='modal')
          .modal-body
            form#addItemForm.needs-validation(novalidate)
              .mb-3
                .form-floating
                  input.form-control#itemName(type='text' placeholder='Item name' required)
                  label(for='itemName') Item Name
                  .invalid-feedback Please enter an item name.
              
              .row.g-3.mb-3
                .col-md-6
                  .form-floating
                    input.form-control#itemPrice(type='number' step='0.01' min='0' placeholder='0.00' required)
                    label(for='itemPrice')= `Price (${CurrencyHelper.getSymbol(userCurrency)})`
                    .invalid-feedback Please enter a valid price.
                
                .col-md-6
                  .form-floating
                    input.form-control#itemQuantity(type='number' min='1' value='1' placeholder='1')
                    label(for='itemQuantity') Quantity
              
              .mb-3
                .form-floating
                  select.form-control#itemCategory(required)
                    option(value='') Select a category
                    if categories
                      each category in categories
                        option(value=category._id)= category.name
                  label(for='itemCategory') Category
                  .invalid-feedback Please select a category.
              
              .mb-3
                .form-floating
                  input.form-control#purchaseDate(type='date')
                  label(for='purchaseDate') Purchase Date
              
              .mb-3
                .form-check
                  input.form-check-input#isEssential(type='checkbox')
                  label.form-check-label(for='isEssential') Mark as Essential Item
              
              .mb-3
                .form-floating
                  textarea.form-control#itemNotes(style='height: 80px;' placeholder='Optional notes')
                  label(for='itemNotes') Notes (Optional)
          
          .modal-footer
            button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Cancel
            button.btn.btn-primary(type='button' onclick='addItemToBudget()')
              i.bi.bi-plus-circle.me-2
              | Add Item

block scripts
  style.
    .metric-card.border-success { border-color: var(--success) !important; }
    .progress { background-color: var(--gray-200); }
    .badge { font-weight: 500; }
  
  script.
    // Category limit toggle
    document.querySelectorAll('.category-check').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const limitInput = this.closest('.row').querySelector('.category-limit');
        limitInput.disabled = !this.checked;
        if (!this.checked) limitInput.value = '';
      });
    });

    // Form validation
    (() => {
      'use strict';
      const forms = document.querySelectorAll('.needs-validation');
      Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add('was-validated');
        }, false);
      });
    })();

    async function createBudget() {
      const categories = [];
      document.querySelectorAll('.category-check:checked').forEach(checkbox => {
        const limitInput = checkbox.closest('.row').querySelector('.category-limit');
        if (limitInput.value) {
          categories.push({ categoryId: checkbox.value, limit: parseFloat(limitInput.value) });
        }
      });
      
      const budgetData = {
        name: document.getElementById('budgetName').value,
        totalLimit: parseFloat(document.getElementById('totalLimit').value),
        period: {
          start: document.getElementById('startDate').value,
          end: document.getElementById('endDate').value
        },
        categories
      };
      
      try {
        const response = await fetch('/api/budgets', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
          },
          body: JSON.stringify(budgetData)
        });
        
        const data = await response.json();
        if (data.success) {
          location.reload();
        } else {
          let errorMsg = data.message || 'Failed to create budget';
          if (data.errors && Array.isArray(data.errors)) {
            errorMsg = data.errors.map(e => e.msg || e.message).join('\\n');
          }
          showToast('error', errorMsg);
        }
      } catch {
        showToast('error', 'Error creating budget');
      }
    }
    
    function viewBudget(id) {
      window.location.href = `/budgets/${id}`;
    }
    
    function exportBudget(id) {
      window.location.href = `/api/export/budget/${id}/pdf`;
    }
    
    async function deleteBudget(id) {
      if (confirm('Are you sure you want to delete this budget?')) {
        try {
          const response = await fetch(`/api/budgets/${id}`, {
            method: 'DELETE',
            headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
          });
          if (response.ok) location.reload();
        } catch {
          showToast('error', 'Error deleting budget');
        }
      }
    }
    
    document.addEventListener('DOMContentLoaded', () => {
      const purchaseDateInput = document.getElementById('purchaseDate');
      if (purchaseDateInput) {
        purchaseDateInput.valueAsDate = new Date();
      }
    });
    
    async function addItemToBudget() {
      const activeBudget = !{JSON.stringify(activeBudget || {})};
      if (!activeBudget._id) {
        showToast('error', 'No active budget found');
        return;
      }
      
      const itemData = {
        budgetId: activeBudget._id,
        name: document.getElementById('itemName').value,
        price: parseFloat(document.getElementById('itemPrice').value),
        quantity: parseInt(document.getElementById('itemQuantity').value) || 1,
        categoryId: document.getElementById('itemCategory').value,
        purchaseDate: document.getElementById('purchaseDate').value,
        isEssential: document.getElementById('isEssential').checked,
        notes: document.getElementById('itemNotes').value
      };
      
      if (!itemData.name || !itemData.price || !itemData.categoryId) {
        showToast('error', 'Please fill in all required fields');
        return;
      }
      
      try {
        const response = await fetch('/api/items', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
          },
          body: JSON.stringify(itemData)
        });
        
        const data = await response.json();
        if (data.success) {
          bootstrap.Modal.getInstance(document.getElementById('addItemModal')).hide();
          document.getElementById('addItemForm').reset();
          showToast('success', `Item added successfully to ${activeBudget.name}`);
          setTimeout(() => location.reload(), 1000);
        } else {
          showToast('error', data.message || 'Failed to add item');
        }
      } catch {
        showToast('error', 'Error adding item');
      }
    }
    
    function showToast(type, message) {
      let container = document.getElementById('toast-container');
      if (!container) {
        container = document.createElement('div');
        container.id = 'toast-container';
        container.className = 'position-fixed bottom-0 end-0 p-3';
        container.style.zIndex = '1050';
        document.body.appendChild(container);
      }
      const toast = document.createElement('div');
      toast.className = `toast show align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0 mb-2`;
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">${message}</div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>`;
      container.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }
